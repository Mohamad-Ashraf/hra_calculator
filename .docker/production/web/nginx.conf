server {
    listen 80;
    server_name API_URL;
    location / {
        return 301 https://$host$request_uri;
    }
}
server {
    listen 443 ssl http2;
    server_name API_URL;
    client_max_body_size 2G;
    keepalive_timeout 300s;

    ssl_certificate /etc/ssl/ssl_cert.pem;
    ssl_certificate_key /etc/ssl/ssl_key.pem;

    ssl_session_cache    shared:SSL:1m;
    ssl_session_timeout  5m;

    ssl_ciphers  HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # https://www.techrepublic.com/article/how-to-configure-gzip-compression-with-nginx/
    gzip on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;

    location ^~ /admin/ {
        proxy_set_header  Host $http_host;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_redirect off;
        proxy_read_timeout 300s;
        proxy_pass  http://app:3000/admin/;
    }

    location ^~ /api/ {
        proxy_set_header  Host $http_host;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_redirect off;
        proxy_pass  http://app:3000/api/;
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;

        try_files $uri/index.html $uri.html $uri @app;


    }

    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # location ~* \.(?:manifest|appcache|html?|webmanifest|xml|json)$ {
    #     expires -1;
    # }

    # # This block will catch static file requests, such as images
    # # The ?: prefix is a 'non-capturing' mark, meaning we do not require
    # # the pattern to be captured into $1 which should help improve performance
    # location ~* \.(?:jpg|jpeg|gif|png|ico|webp|svg)$ {

    #     # The Expires HTTP header is a basic means of controlling caches; it tells all caches how long 
    #     # the associated representation is fresh for. After that time, caches will always check back with 
    #     # the origin server to see if a document is changed.
    #     #
    #     # "If a request includes the no-cache directive, it SHOULD NOT include min-fresh, max-stale, or max-age." 
    #     # (source: http://www.ietf.org/rfc/rfc2616.txt, p114)
    #     #
    #     # Nginx automatically sets the `Cache-Control: max-age=t` header, if `expires` is present, where t is a time 
    #     # specified in the directive, in seconds. Shortcuts for time can be used, for example 5m for 5 minutes.
    #     #
    #     expires           31536000;

    #     # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required, 
    #     #                   responses are automatically private.
    #     # 
    #     add_header        Cache-Control "public";
    # }

    # location ~* \.(?:css|js)$ {
    #     expires           31536000;
    #     add_header        Cache-Control "public";
    # }

    location @app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_redirect off;
        proxy_pass http://app:3000;
    }

}
